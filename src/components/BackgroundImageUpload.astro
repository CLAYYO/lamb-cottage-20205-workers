---
import { normalizeImageUrl } from '../lib/url-utils';

export interface Props {
  sectionId: string;
  fieldPath: string;
  content: string;
  className?: string;
}

const { sectionId, fieldPath, content, className = '' } = Astro.props;
const uploadId = `${sectionId}-${fieldPath.replace(/\./g, '-')}`;
const imageUrl = normalizeImageUrl(content);
---

<div class={`background-image-upload ${className}`}>
  <!-- Current Image Preview -->
  <div class="current-image-preview">
    {content ? (
      <img 
        src={imageUrl} 
        alt="Current background image" 
        class="preview-image"
        style="max-width: 300px; max-height: 200px; object-fit: cover; border-radius: 8px;"
      />
    ) : (
      <div class="no-image-placeholder">
        <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
          <circle cx="8.5" cy="8.5" r="1.5"></circle>
          <polyline points="21,15 16,10 5,21"></polyline>
        </svg>
        <p>No image selected</p>
      </div>
    )}
  </div>

  <!-- Upload Controls -->
  <div class="upload-controls">
    <input 
      type="file" 
      id={uploadId}
      accept="image/*"
      class="file-input"
      style="display: none;"
    />
    <button 
      type="button" 
      class="upload-btn"
      onclick={`document.getElementById('${uploadId}').click()`}
    >
      {content ? 'Change Image' : 'Upload Image'}
    </button>
    {content && (
      <button 
        type="button" 
        class="remove-btn"
        onclick={`removeBackgroundImage('${sectionId}', '${fieldPath}')`}
      >
        Remove
      </button>
    )}
  </div>

  <!-- Hidden input to store the current value -->
  <input 
    type="hidden" 
    name={`${sectionId}.${fieldPath}`}
    value={content}
    id={`hidden-${uploadId}`}
  />
</div>

<style>
  .background-image-upload {
    border: 2px dashed #e5e7eb;
    border-radius: 8px;
    padding: 1rem;
    text-align: center;
    background: #f9fafb;
  }

  .current-image-preview {
    margin-bottom: 1rem;
  }

  .no-image-placeholder {
    color: #6b7280;
    padding: 2rem;
  }

  .no-image-placeholder svg {
    margin: 0 auto 0.5rem;
    color: #d1d5db;
  }

  .upload-controls {
    display: flex;
    gap: 0.5rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .upload-btn {
    background: #3b82f6;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.875rem;
    transition: background-color 0.2s;
  }

  .upload-btn:hover {
    background: #2563eb;
  }

  .remove-btn {
    background: #ef4444;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.875rem;
    transition: background-color 0.2s;
  }

  .remove-btn:hover {
    background: #dc2626;
  }

  .preview-image {
    border: 1px solid #e5e7eb;
  }
</style>

<script is:inline>
  // Import URL utilities
  const { normalizeImageUrl, toRelativeUrl } = await import('/src/lib/url-utils.js');
  
  // Handle file upload
  document.addEventListener('change', async function(e) {
    const target = e.target;
    if (target && target instanceof HTMLInputElement && target.type === 'file') {
      const fileInput = target;
      const file = fileInput.files && fileInput.files[0];
      
      if (file) {
        const formData = new FormData();
        formData.append('file', file);
        
        // Show loading state
        const uploadBtn = fileInput.parentElement && fileInput.parentElement.querySelector('.upload-btn');
        if (!uploadBtn) return;
        
        const originalText = uploadBtn.textContent || '';
        uploadBtn.textContent = 'Uploading...';
        uploadBtn.disabled = true;
        
        try {
          // Wait for securityManager to be available
          while (!window.securityManager) {
            await new Promise(resolve => setTimeout(resolve, 100));
          }
          
          // Upload the image using direct fetch for FormData
          // Get CSRF tokens manually for FormData uploads
          const tokens = await window.securityManager.getCSRFTokens();
          
          const headers = {
            'X-Requested-With': 'XMLHttpRequest',
            'X-CSRF-Token': tokens.token,
            'X-Session-ID': tokens.sessionId
            // Don't set Content-Type - let browser set it for FormData
          };
          
          const response = await fetch('/api/images/upload', {
            method: 'POST',
            body: formData,
            credentials: 'include',
            headers
          });
          
          if (!response.ok) {
            const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
            throw new Error(errorData.error || `Upload failed: ${response.status}`);
          }
          
          const data = await response.json();
          
          if (data.success) {
            // Update the preview and hidden input
            const container = fileInput.closest('.background-image-upload');
            if (!container) return;
            
            const preview = container.querySelector('.current-image-preview');
            const hiddenInput = container.querySelector('input[type="hidden"]');
            
            if (preview && hiddenInput) {
              // Get the correct URL from the API response
              const imageUrl = data.file ? data.file.url : data.url;
              
              if (!imageUrl) {
                console.error('No image URL found in response:', data);
                throw new Error('No image URL returned from server');
              }
              
              console.log('Using image URL:', imageUrl);
              
              // Add a small delay to allow the dev server to recognize the new file
              setTimeout(() => {
                // Update preview with consistent URL handling using utility function
                const displayUrl = normalizeImageUrl(imageUrl);
                preview.innerHTML = `
                  <img 
                    src="${displayUrl}" 
                    alt="Current background image" 
                    class="preview-image"
                    style="max-width: 300px; max-height: 200px; object-fit: cover; border-radius: 8px;"
                  />
                `;
                
                // Update hidden input with relative URL for cross-environment compatibility
                hiddenInput.value = toRelativeUrl(imageUrl);
                
                // Update button text
                uploadBtn.textContent = 'Change Image';
                
                // Add remove button if not exists
                if (!container.querySelector('.remove-btn')) {
                  const removeBtn = document.createElement('button');
                  removeBtn.type = 'button';
                  removeBtn.className = 'remove-btn';
                  removeBtn.textContent = 'Remove';
                  removeBtn.onclick = function() {
                    const sectionId = hiddenInput.name.split('.')[0];
                    const fieldPath = hiddenInput.name.split('.').slice(1).join('.');
                    window.removeBackgroundImage(sectionId, fieldPath);
                  };
                  const uploadControls = container.querySelector('.upload-controls');
                  if (uploadControls) {
                    uploadControls.appendChild(removeBtn);
                  }
                }
                
                console.log('Image uploaded successfully:', imageUrl);
              }, 500); // 500ms delay to allow server to recognize the file
            }
          } else {
            alert('Upload failed: ' + (data.error || 'Unknown error'));
          }
        } catch (error) {
          console.error('Upload error details:', {
            message: error.message,
            stack: error.stack,
            error: error
          });
          alert('Upload failed: ' + (error && error.message ? error.message : 'Unknown error'));
        } finally {
          uploadBtn.textContent = originalText;
          uploadBtn.disabled = false;
        }
      }
    }
  });
  
  // Remove image function
  window.removeBackgroundImage = function(sectionId, fieldPath) {
    const hiddenInput = document.querySelector(`input[name="${sectionId}.${fieldPath}"]`);
    if (!hiddenInput) return;
    
    const container = hiddenInput.closest('.background-image-upload');
    const preview = container && container.querySelector('.current-image-preview');
    const uploadBtn = container && container.querySelector('.upload-btn');
    const removeBtn = container && container.querySelector('.remove-btn');
    
    // Clear the value
    hiddenInput.value = '';
    
    // Update preview to placeholder
    if (preview) {
      preview.innerHTML = `
        <div class="no-image-placeholder">
          <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
            <circle cx="8.5" cy="8.5" r="1.5"></circle>
            <polyline points="21,15 16,10 5,21"></polyline>
          </svg>
          <p>No image selected</p>
        </div>
      `;
    }
    
    // Update button text
    if (uploadBtn) {
      uploadBtn.textContent = 'Upload Image';
    }
    
    // Remove the remove button
    if (removeBtn) {
      removeBtn.remove();
    }
  };
</script>