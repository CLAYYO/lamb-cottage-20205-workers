---
export const prerender = false;

import AdminLayout from '../../layouts/AdminLayout.astro';
import VisualEditor from '../../components/VisualEditor.astro';
import BackgroundImageUpload from '../../components/BackgroundImageUpload.astro';
import LivePreview from '../../components/LivePreview.astro';
import { getContent } from '../api/content/load.ts';
import { requireAdminAuth } from '../../middleware/auth';

// Check authentication before rendering
const authResult = await requireAdminAuth(Astro);
if (authResult) {
  return authResult;
}

const content = await getContent();
---

<AdminLayout title="Content Editor">
  <div class="content-editor">
    <div class="editor-header">
      <h1>Content Editor</h1>
      <div class="editor-actions">
        <button id="save-btn" class="btn btn-primary">Save Changes</button>
        <button id="toggle-preview-btn" class="btn btn-secondary">
          <span id="preview-toggle-text">Show Preview</span>
        </button>
        <button id="reset-btn" class="btn btn-outline">Reset</button>
      </div>
    </div>
    
    <div class="editor-content">
      <!-- Section Navigation -->
      <div class="section-nav">
        <h3>Page Sections</h3>
        <nav class="section-list">
          <button class="section-btn active" data-section="hero">Hero Section</button>
          <button class="section-btn" data-section="welcome">Welcome</button>
          <button class="section-btn" data-section="tagline">Tagline</button>
          <button class="section-btn" data-section="facilities">Facilities</button>
          <button class="section-btn" data-section="property">Property Sales</button>
          <button class="section-btn" data-section="reviews">Customer Reviews</button>
          <button class="section-btn" data-section="booking">Booking Banner</button>
          <button class="section-btn" data-section="contact">Contact Form</button>
          <button class="section-btn" data-section="footer">Footer</button>
        </nav>
      </div>
      
      <!-- Content Editor Panel -->
      <div class="content-layout" id="content-layout">
        <div class="editor-panel">
          <div class="section-panels">
        <!-- Hero Section Editor -->
        <div class="section-editor active" id="hero-editor">
          <h2>Hero Section</h2>
          <div class="form-group">
            <label for="hero-title">Main Title</label>
            <VisualEditor 
              sectionId="hero" 
              fieldPath="title" 
              content={content.hero.title} 
              type="text" 
              placeholder="Enter hero title"
              className="form-input"
            />
          </div>
          <div class="form-group">
            <label for="hero-subtitle">Subtitle</label>
            <VisualEditor 
              sectionId="hero" 
              fieldPath="subtitle" 
              content={content.hero.subtitle} 
              type="textarea" 
              placeholder="Enter hero subtitle"
              className="form-textarea"
            />
          </div>
          <div class="form-group">
            <label for="hero-cta">Call to Action Button Text</label>
            <VisualEditor 
              sectionId="hero" 
              fieldPath="ctaButton.text" 
              content={content.hero.ctaButton?.text || ''} 
              type="text" 
              placeholder="Enter CTA text"
              className="form-input"
            />
          </div>
          <div class="form-group">
            <label for="hero-image">Background Image</label>
            <div class="image-upload-container">
              <BackgroundImageUpload 
                sectionId="hero" 
                fieldPath="backgroundImage.src" 
                content={content.hero.backgroundImage?.src || ''} 
                className="image-preview"
              />
              <div class="image-specs">
                <small class="text-gray-600">Recommended size: 1920x600px</small>
              </div>
            </div>
          </div>
          <div class="form-group">
            <label for="hero-opacity">Background Opacity</label>
            <div class="opacity-control">
              <VisualEditor 
                sectionId="hero" 
                fieldPath="backgroundImage.opacity" 
                content={content.hero.backgroundImage?.opacity || 0.4} 
                type="range" 
                className="opacity-slider"
                min="0" 
                max="1" 
                step="0.1"
              />
              <span class="opacity-value">{Math.round((content.hero.backgroundImage?.opacity || 0.4) * 100)}%</span>
            </div>
          </div>
        </div>
        
        <!-- Welcome Section Editor -->
        <div class="section-editor" id="welcome-editor">
          <div class="section-header">
            <h2 class="section-title">Welcome Section</h2>
            <p class="section-description">Edit the welcome message and introduction content</p>
          </div>
          
          <div class="form-group">
            <label class="form-label">Title</label>
            <VisualEditor 
              type="text" 
              sectionId="welcome" 
              fieldPath="title" 
              content={content.welcome.title} 
            />
          </div>
          
          <div class="form-group">
            <label class="form-label">Content</label>
            <VisualEditor 
              type="rich" 
              sectionId="welcome" 
              fieldPath="content" 
              content={content.welcome.content} 
            />
          </div>
          
          <div class="form-group">
            <label class="form-label">Image</label>
            <VisualEditor 
              type="image" 
              sectionId="welcome" 
              fieldPath="image.src" 
              content={content.welcome.image?.src || ''} 
            />
          </div>
        </div>
        
        <!-- Tagline Section Editor -->
        <div class="section-editor" id="tagline-editor">
          <div class="section-header">
            <h2 class="section-title">Tagline Section</h2>
            <p class="section-description">Edit the main tagline that appears prominently on the page</p>
          </div>
          
          <div class="form-group">
            <label class="form-label">Tagline Text</label>
            <VisualEditor 
              type="text" 
              sectionId="tagline" 
              fieldPath="text" 
              content={content.tagline.text} 
            />
          </div>
          
          <div class="form-group">
            <label class="form-label">Tagline Highlight</label>
            <VisualEditor 
              type="text" 
              sectionId="tagline" 
              fieldPath="highlight" 
              content={content.tagline.highlight} 
            />
          </div>
        </div>
        
        <!-- Facilities Section Editor -->
        <div class="section-editor" id="facilities-editor">
          <div class="section-header">
            <h2 class="section-title">Facilities Section</h2>
            <p class="section-description">Manage the facilities and amenities showcase</p>
          </div>
          
          <div class="form-group">
            <label class="form-label">Section Title</label>
            <VisualEditor 
              type="text" 
              sectionId="facilities" 
              fieldPath="title" 
              content={content.facilities.title} 
            />
          </div>
          
          <div class="form-group">
            <label class="form-label">Section Subtitle</label>
            <VisualEditor 
              type="textarea" 
              sectionId="facilities" 
              fieldPath="subtitle" 
              content={content.facilities.subtitle} 
            />
          </div>
          
          <div class="form-group">
            <label for="facilities-image">Background Image</label>
            <div class="image-upload-container">
              <BackgroundImageUpload 
                sectionId="facilities" 
                fieldPath="backgroundImage.src" 
                content={content.facilities.backgroundImage?.src || ''} 
                className="image-preview"
              />
              <div class="image-specs">
                <small class="text-gray-600">Recommended size: 1920x600px</small>
              </div>
            </div>
          </div>
          <div class="form-group">
            <label for="facilities-opacity">Background Opacity</label>
            <div class="opacity-control">
              <VisualEditor 
                sectionId="facilities" 
                fieldPath="backgroundImage.opacity" 
                content={content.facilities.backgroundImage?.opacity || 0.4} 
                type="range" 
                className="opacity-slider"
                min="0" 
                max="1" 
                step="0.1"
              />
              <span class="opacity-value">{Math.round((content.facilities.backgroundImage?.opacity || 0.4) * 100)}%</span>
            </div>
          </div>
          
          <div class="form-group">
            <label class="form-label">Facilities List</label>
            <div class="facilities-list">
              {Object.values(content.facilities.items || {}).map((facility: any, index: number) => (
                <div class="facility-item border border-gray-200 rounded-lg p-4 mb-4">
                  <div class="grid grid-cols-2 gap-4">
                    <div>
                      <label class="form-label text-sm">Facility Name</label>
                      <VisualEditor 
                        type="text" 
                        sectionId="facilities" 
                        fieldPath={`items.${index}.name`} 
                        content={facility.name} 
                      />
                    </div>
                    <div>
                      <label class="form-label text-sm">Description</label>
                      <VisualEditor 
                        type="textarea" 
                        sectionId="facilities" 
                        fieldPath={`items.${index}.description`} 
                        content={facility.description} 
                      />
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
        
        <!-- Property Sales Section Editor -->
        <div class="section-editor" id="property-editor">
          <div class="section-header">
            <h2 class="section-title">Property Sales Section</h2>
            <p class="section-description">Manage property listings and sales information</p>
          </div>
          
          <div class="form-group">
            <label class="form-label">Section Title</label>
            <VisualEditor 
              type="text" 
              sectionId="propertySales" 
              fieldPath="title" 
              content={content.propertySales.title} 
            />
          </div>
          
          <div class="form-group">
            <label class="form-label">Section Subtitle</label>
            <VisualEditor 
              type="textarea" 
              sectionId="propertySales" 
              fieldPath="subtitle" 
              content={content.propertySales.subtitle} 
            />
          </div>
          
          <div class="form-group">
            <label class="form-label">Properties</label>
            <div class="properties-list">
              {(content.propertySales.properties || []).map((property: any, index: number) => (
                <div class="property-item border border-gray-200 rounded-lg p-4 mb-4">
                  <div class="grid grid-cols-2 gap-4 mb-4">
                    <div>
                      <label class="form-label text-sm">Property Title</label>
                      <VisualEditor 
                        type="text" 
                        sectionId="propertySales" 
                        fieldPath={`properties.${index}.title`} 
                        content={property.title} 
                      />
                    </div>
                    <div>
                      <label class="form-label text-sm">Price</label>
                      <VisualEditor 
                        type="text" 
                        sectionId="propertySales" 
                        fieldPath={`properties.${index}.price`} 
                        content={property.price} 
                      />
                    </div>
                  </div>
                  <div class="mb-4">
                    <label class="form-label text-sm">Description</label>
                    <VisualEditor 
                      type="textarea" 
                      sectionId="propertySales" 
                      fieldPath={`properties.${index}.description`} 
                      content={property.description} 
                    />
                  </div>
                  <div class="mb-4">
                    <label class="form-label text-sm">Features</label>
                    <VisualEditor 
                      type="textarea" 
                      sectionId="propertySales" 
                      fieldPath={`properties.${index}.features`} 
                      content={(property.features || []).join('\n')} 
                      placeholder="Enter features, one per line"
                    />
                  </div>
                  <div class="grid grid-cols-2 gap-4">
                    <div>
                      <label class="form-label text-sm">Property Image URL</label>
                      <VisualEditor 
                        type="image" 
                        sectionId="propertySales" 
                        fieldPath={`properties.${index}.image.src`} 
                        content={property.image?.src || ''} 
                      />
                    </div>
                    <div>
                      <label class="form-label text-sm">Image Alt Text</label>
                      <VisualEditor 
                        type="text" 
                        sectionId="propertySales" 
                        fieldPath={`properties.${index}.image.alt`} 
                        content={property.image?.alt || ''} 
                        placeholder="Describe the image for accessibility"
                      />
                    </div>
                  </div>
                  <div class="mt-4">
                    <label class="form-label text-sm">Link URL</label>
                    <VisualEditor 
                      type="text" 
                      sectionId="propertySales" 
                      fieldPath={`properties.${index}.link.url`} 
                      content={property.link?.url || ''} 
                      placeholder="URL to property details page"
                    />
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
        
        <!-- Reviews Section Editor -->
        <div class="section-editor" id="reviews-editor">
          <div class="section-header">
            <h2 class="section-title">Customer Reviews Section</h2>
            <p class="section-description">Manage customer testimonials and reviews</p>
          </div>
          
          <div class="form-group">
            <label class="form-label">Section Title</label>
            <VisualEditor 
              type="text" 
              sectionId="reviews" 
              fieldPath="title" 
              content={content.reviews.title} 
            />
          </div>
          
          <div class="form-group">
            <label class="form-label">Section Subtitle</label>
            <VisualEditor 
              type="textarea" 
              sectionId="reviews" 
              fieldPath="subtitle" 
              content={content.reviews.subtitle} 
            />
          </div>
          
          <div class="form-group">
            <label class="form-label">Customer Reviews</label>
            <div class="reviews-list">
              {Object.values(content.reviews.items || {}).map((review: any, index: number) => (
                <div class="review-item border border-gray-200 rounded-lg p-4 mb-4">
                  <div class="grid grid-cols-2 gap-4 mb-4">
                    <div>
                      <label class="form-label text-sm">Customer Name</label>
                      <VisualEditor 
                        type="text" 
                        sectionId="reviews" 
                        fieldPath={`items.${index}.name`} 
                        content={review.name} 
                      />
                    </div>
                    <div>
                      <label class="form-label text-sm">Rating (1-5)</label>
                      <VisualEditor 
                        type="text" 
                        sectionId="reviews" 
                        fieldPath={`items.${index}.rating`} 
                        content={review.rating.toString()} 
                      />
                    </div>
                  </div>
                  <div class="mb-4">
                    <label class="form-label text-sm">Review Text</label>
                    <VisualEditor 
                      type="textarea" 
                      sectionId="reviews" 
                      fieldPath={`items.${index}.text`} 
                      content={review.text} 
                    />
                  </div>
                  <div>
                    <label class="form-label text-sm">Review Date</label>
                    <VisualEditor 
                      type="text" 
                      sectionId="reviews" 
                      fieldPath={`items.${index}.date`} 
                      content={review.date} 
                    />
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
        
        <!-- Booking Banner Section Editor -->
        <div class="section-editor" id="booking-editor">
          <div class="section-header">
            <h2 class="section-title">Booking Banner Section</h2>
            <p class="section-description">Edit the booking call-to-action banner</p>
          </div>
          
          <div class="form-group">
            <label class="form-label">Banner Title</label>
            <VisualEditor 
              type="text" 
              sectionId="bookingBanner" 
              fieldPath="title" 
              content={content.bookingBanner.title} 
            />
          </div>
          
          <div class="form-group">
            <label class="form-label">Banner Subtitle</label>
            <VisualEditor 
              type="textarea" 
              sectionId="bookingBanner" 
              fieldPath="subtitle" 
              content={content.bookingBanner.subtitle} 
            />
          </div>
          
          <div class="form-group">
            <label for="booking-image">Background Image</label>
            <div class="image-upload-container">
              <BackgroundImageUpload 
                sectionId="bookingBanner" 
                fieldPath="backgroundImage.src" 
                content={content.bookingBanner.backgroundImage?.src || ''} 
                className="image-preview"
              />
              <div class="image-specs">
                <small class="text-gray-600">Recommended size: 1920x600px</small>
              </div>
            </div>
          </div>
          <div class="form-group">
            <label for="booking-opacity">Background Opacity</label>
            <div class="opacity-control">
              <VisualEditor 
                sectionId="bookingBanner" 
                fieldPath="backgroundImage.opacity" 
                content={content.bookingBanner.backgroundImage?.opacity || 0.4} 
                type="range" 
                className="opacity-slider"
                min="0" 
                max="1" 
                step="0.1"
              />
              <span class="opacity-value">{Math.round((content.bookingBanner.backgroundImage?.opacity || 0.4) * 100)}%</span>
            </div>
          </div>
          
          <div class="grid grid-cols-2 gap-6">
            <div class="form-group">
              <label class="form-label">Primary Button Text</label>
              <VisualEditor 
                type="text" 
                sectionId="bookingBanner" 
                fieldPath="primaryButton.text" 
                content={content.bookingBanner.primaryButton?.text || ''} 
              />
            </div>
            
            <div class="form-group">
              <label class="form-label">Primary Button URL</label>
              <VisualEditor 
                type="text" 
                sectionId="bookingBanner" 
                fieldPath="primaryButton.url" 
                content={content.bookingBanner.primaryButton?.url || ''} 
              />
            </div>
          </div>
          
          <div class="grid grid-cols-2 gap-6">
            <div class="form-group">
              <label class="form-label">Secondary Button Text</label>
              <VisualEditor 
                type="text" 
                sectionId="bookingBanner" 
                fieldPath="secondaryButton.text" 
                content={content.bookingBanner.secondaryButton?.text || ''} 
              />
            </div>
            
            <div class="form-group">
              <label class="form-label">Secondary Button URL</label>
              <VisualEditor 
                type="text" 
                sectionId="bookingBanner" 
                fieldPath="secondaryButton.url" 
                content={content.bookingBanner.secondaryButton?.url || ''} 
              />
            </div>
          </div>
        </div>
        
        <!-- Contact Section Editor -->
        <div class="section-editor" id="contact-editor">
          <div class="section-header">
            <h2 class="section-title">Contact Section</h2>
            <p class="section-description">Edit contact information and form settings</p>
          </div>
          
          <div class="form-group">
            <label class="form-label">Section Title</label>
            <VisualEditor 
              type="text" 
              sectionId="contact" 
              fieldPath="title" 
              content={content.contact.title} 
            />
          </div>
          
          <div class="form-group">
            <label class="form-label">Section Subtitle</label>
            <VisualEditor 
              type="textarea" 
              sectionId="contact" 
              fieldPath="subtitle" 
              content={content.contact.subtitle} 
            />
          </div>
          
          <div class="grid grid-cols-2 gap-6">
            <div class="form-group">
              <label class="form-label">Address</label>
              <VisualEditor 
                type="textarea" 
                sectionId="contact" 
                fieldPath="address" 
                content={content.contact.address} 
              />
            </div>
            
            <div class="form-group">
              <label class="form-label">Phone</label>
              <VisualEditor 
                type="text" 
                sectionId="contact" 
                fieldPath="phone" 
                content={content.contact.phone} 
              />
            </div>
          </div>
          
          <div class="form-group">
            <label class="form-label">Email</label>
            <VisualEditor 
              type="text" 
              sectionId="contact" 
              fieldPath="email" 
              content={content.contact.email} 
            />
          </div>
        </div>
        
        <!-- Footer Section Editor -->
        <div class="section-editor" id="footer-editor">
          <div class="section-header">
            <h2 class="section-title">Footer Section</h2>
            <p class="section-description">Edit footer content and links</p>
          </div>
          
          <div class="form-group">
            <label class="form-label">Company Name</label>
            <VisualEditor 
              type="text" 
              sectionId="footer" 
              fieldPath="companyName" 
              content={content.footer.companyName} 
            />
          </div>
          
          <div class="form-group">
            <label class="form-label">Description</label>
            <VisualEditor 
              type="textarea" 
              sectionId="footer" 
              fieldPath="description" 
              content={content.footer.description} 
            />
          </div>
          
          <div class="form-group">
            <label class="form-label">Copyright Text</label>
            <VisualEditor 
              type="text" 
              sectionId="footer" 
              fieldPath="copyright" 
              content={content.footer.copyright} 
            />
          </div>
        </div>
        </div>
        
        <!-- Live Preview Panel -->
        <div class="preview-panel" id="preview-panel" style="display: none;">
          <LivePreview content={content} />
        </div>
      </div>
    </div>

  <style>
    /* Content Editor Styles - Updated Layout v2.2 - Cache Bust */
    .content-editor {
      max-width: 1200px;
      margin: 0 auto;
    }
    
    .editor-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid #e5e7eb;
    }
    
    .editor-header h1 {
      font-size: 2rem;
      font-weight: 700;
      color: #1f2937;
      margin: 0;
    }
    
    .editor-actions {
      display: flex;
      gap: 0.75rem;
    }
    
    .btn {
      padding: 0.5rem 1rem;
      border-radius: 0.375rem;
      font-weight: 500;
      text-decoration: none;
      cursor: pointer;
      border: 1px solid transparent;
      transition: all 0.2s;
    }
    
    .btn-primary {
      background-color: #4CAF50;
      color: white;
      border-color: #4CAF50;
    }
    
    .btn-primary:hover {
      background-color: #45a049;
    }
    
    .btn-secondary {
      background-color: #6b7280;
      color: white;
    }
    
    .btn-secondary:hover {
      background-color: #5b6470;
    }
    
    .btn-outline {
      background-color: transparent;
      color: #4CAF50;
      border-color: #4CAF50;
    }
    
    .btn-outline:hover {
      background-color: #4CAF50;
      color: white;
    }
    
    .btn-danger {
      background-color: #ef4444;
      color: white;
    }
    
    .btn-sm {
      padding: 0.25rem 0.5rem;
      font-size: 0.875rem;
    }
    
    .editor-content {
      display: grid;
      grid-template-columns: 250px 1fr;
      gap: 2rem;
      height: calc(100vh - 120px);
      overflow: hidden;
    }
    
    .content-layout {
      display: flex;
      gap: 1.5rem;
      transition: all 0.3s ease;
      min-height: 600px;
      flex: 1;
    }
    
    .content-layout.with-preview .editor-panel {
      width: 58%;
      min-width: 650px;
    }
    
    .content-layout.with-preview .preview-panel {
      width: 42%;
      min-width: 450px;
      display: block !important;
    }
    
    .preview-panel {
      background: white;
      border-radius: 0.5rem;
      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
      border: 1px solid #e5e7eb;
    }
    
    .section-nav {
      background: #f8fafc;
      border-right: 2px solid #e2e8f0;
      padding: 1.5rem;
      overflow-y: auto;
      box-shadow: 2px 0 4px rgba(0,0,0,0.05);
    }
    
    .section-nav h3 {
      font-size: 1.125rem;
      font-weight: 600;
      margin-bottom: 1rem;
      color: #1f2937;
    }
    
    .section-list {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }
    
    .section-btn {
      padding: 0.75rem;
      text-align: left;
      background: transparent;
      border: 1px solid #e5e7eb;
      border-radius: 0.375rem;
      cursor: pointer;
      transition: all 0.2s;
      color: #6b7280;
    }
    
    .section-btn:hover {
      background-color: #f9fafb;
      border-color: #4CAF50;
    }
    
    .section-btn.active {
      background-color: #4CAF50;
      color: white;
      border-color: #4CAF50;
    }
    
    .editor-panel {
      background: #ffffff;
      padding: 2rem 3rem;
      overflow-y: auto;
      border-radius: 8px;
      box-shadow: 0 4px 12px -2px rgba(0, 0, 0, 0.1);
      border: 1px solid #f1f5f9;
      flex: 1;
      max-width: 1000px;
    }
    
    .section-editor {
      display: none;
    }
    
    .section-editor.active {
      display: block;
    }
    
    .section-editor h2 {
      font-size: 1.5rem;
      font-weight: 600;
      margin-bottom: 1.5rem;
      color: #1f2937;
    }
    
    .form-group {
      margin-bottom: 2rem;
      padding: 0.75rem 0;
    }
    
    .form-group label {
      display: block;
      font-weight: 500;
      margin-bottom: 0.75rem;
      color: #374151;
      font-size: 0.95rem;
    }
    
    .image-upload-container {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }
    
    .image-specs {
      font-size: 0.875rem;
      color: #6b7280;
    }
    
    .opacity-control {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
    
    .opacity-value {
      min-width: 40px;
      font-weight: 600;
      color: #374151;
    }
    
    .form-input,
    .form-textarea {
      width: 100%;
      max-width: 800px;
      padding: 1.25rem;
      border: 1px solid #d1d5db;
      border-radius: 0.5rem;
      font-size: 1rem;
      transition: border-color 0.2s;
    }
    
    .form-textarea {
      min-height: 120px;
      resize: vertical;
    }
    
    .form-input:focus,
    .form-textarea:focus {
      outline: none;
      border-color: #4CAF50;
      box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);
    }
    
    .image-upload {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
    
    .image-preview {
      width: 100px;
      height: 60px;
      object-fit: cover;
      border-radius: 0.375rem;
      border: 1px solid #d1d5db;
    }
    
    .file-input {
      display: none;
    }
    
    .wysiwyg-editor {
      border: 1px solid #d1d5db;
      border-radius: 0.375rem;
      overflow: hidden;
    }
    
    .editor-toolbar {
      background: #f9fafb;
      padding: 0.5rem;
      border-bottom: 1px solid #d1d5db;
      display: flex;
      gap: 0.5rem;
    }
    
    .editor-toolbar button {
      padding: 0.25rem 0.5rem;
      border: 1px solid #d1d5db;
      background: white;
      border-radius: 0.25rem;
      cursor: pointer;
      font-size: 0.875rem;
    }
    
    .editor-toolbar button:hover {
      background: #e5e7eb;
    }
    
    .editor-content[contenteditable] {
      padding: 1rem;
      min-height: 150px;
      outline: none;
    }
    
    .facility-item {
      display: grid;
      grid-template-columns: 1fr 3fr auto;
      gap: 1.5rem;
      align-items: start;
      margin-bottom: 1.5rem;
      padding: 1.5rem;
      border: 1px solid #e5e7eb;
      border-radius: 0.5rem;
      background: #fafafa;
      max-width: 800px;
    }
    
    .section-header {
      margin-bottom: 1.5rem;
      padding-bottom: 0.75rem;
      border-bottom: 1px solid #e5e7eb;
    }
    
    .section-title {
      font-size: 1.5rem;
      font-weight: 600;
      color: #1f2937;
      margin-bottom: 0.5rem;
    }
    
    .section-description {
      color: #6b7280;
      font-size: 0.875rem;
      margin: 0;
    }
    
    .form-label {
      display: block;
      font-weight: 500;
      margin-bottom: 0.75rem;
      color: #374151;
      font-size: 0.875rem;
    }
    
    @media (max-width: 1200px) {
      .editor-content {
        grid-template-columns: 220px 1fr;
        gap: 1.5rem;
      }
      
      .editor-panel {
        padding: 1.5rem 2rem;
        max-width: 900px;
      }
      
      .form-input,
      .form-textarea {
        max-width: 700px;
      }
      
      .content-layout.with-preview .editor-panel {
        width: 62%;
        min-width: 550px;
      }
      
      .content-layout.with-preview .preview-panel {
        width: 38%;
        min-width: 380px;
      }
    }
    
    @media (max-width: 768px) {
      .editor-content {
        grid-template-columns: 1fr;
        gap: 1.5rem;
        grid-template-rows: auto 1fr;
      }
      
      .section-nav {
        position: static;
        min-width: auto;
        padding: 1rem;
        border-right: none;
        border-bottom: 2px solid #e2e8f0;
      }
      
      .section-list {
        flex-direction: row;
        flex-wrap: wrap;
        gap: 0.5rem;
      }
      
      .section-btn {
        padding: 0.5rem 0.75rem;
        font-size: 0.875rem;
      }
      
      .content-layout {
        flex-direction: column;
        gap: 1.5rem;
      }
      
      .content-layout.with-preview .editor-panel,
      .content-layout.with-preview .preview-panel {
        width: 100%;
        min-width: auto;
      }
      
      .facility-item {
        grid-template-columns: 1fr;
        gap: 1rem;
        padding: 1rem;
      }
      
      .editor-panel {
        padding: 1.5rem;
      }
    }
  </style>

  <script is:inline>
    // Section navigation
    document.querySelectorAll('.section-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        // Remove active class from all buttons and editors
        document.querySelectorAll('.section-btn').forEach(b => b.classList.remove('active'));
        document.querySelectorAll('.section-editor').forEach(e => e.classList.remove('active'));
        
        // Add active class to clicked button and corresponding editor
        btn.classList.add('active');
        const sectionId = btn.dataset.section + '-editor';
        document.getElementById(sectionId).classList.add('active');
      });
    });
    
    // WYSIWYG editor functionality
    document.querySelectorAll('.editor-toolbar button').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        const command = btn.dataset.command;
        document.execCommand(command, false, null);
      });
    });
    
    // Add facility functionality
    const addFacilityBtn = document.getElementById('add-facility');
    if (addFacilityBtn) {
      addFacilityBtn.addEventListener('click', () => {
        const facilitiesList = document.querySelector('.facilities-list');
        const newFacility = document.createElement('div');
        newFacility.className = 'facility-item';
        newFacility.innerHTML = `
          <input type="text" class="form-input" placeholder="Facility name">
          <textarea class="form-textarea" rows="2" placeholder="Description"></textarea>
          <button class="btn btn-danger btn-sm">Remove</button>
        `;
        facilitiesList.appendChild(newFacility);
        
        // Add remove functionality to new facility
        newFacility.querySelector('.btn-danger').addEventListener('click', () => {
          newFacility.remove();
        });
      });
    }
    
    // Remove facility functionality for existing items
    document.querySelectorAll('.facility-item .btn-danger').forEach(btn => {
      btn.addEventListener('click', () => {
        btn.closest('.facility-item').remove();
      });
    });
    

    
    // Preview functionality
    const togglePreviewBtn = document.getElementById('toggle-preview-btn');
    if (togglePreviewBtn) {
      togglePreviewBtn.addEventListener('click', () => {
        const previewPanel = document.getElementById('preview-panel');
        const contentLayout = document.getElementById('content-layout');
        const toggleText = document.getElementById('preview-toggle-text');
        
        if (previewPanel.style.display === 'none') {
          previewPanel.style.display = 'block';
          contentLayout.classList.add('with-preview');
          toggleText.textContent = 'Hide Preview';
        } else {
          previewPanel.style.display = 'none';
          contentLayout.classList.remove('with-preview');
          toggleText.textContent = 'Show Preview';
        }
      });
    }
    
    // Reset functionality
    const resetBtn = document.getElementById('reset-btn');
    if (resetBtn) {
      resetBtn.addEventListener('click', () => {
        if (confirm('Are you sure you want to reset all changes? This cannot be undone.')) {
          location.reload();
        }
      });
    }
    
    // Save functionality
    const saveBtn = document.getElementById('save-btn');
    
    if (saveBtn) {
      saveBtn.addEventListener('click', async (e) => {
        e.preventDefault();
        
        saveBtn.textContent = 'Saving...';
        saveBtn.disabled = true;
        
        try {
          // First, get CSRF token and session ID
          const csrfResponse = await fetch('/api/auth/csrf');
            if (!csrfResponse.ok) {
              throw new Error('Failed to fetch CSRF token');
            }
            const { csrfToken, sessionId } = await csrfResponse.json();
            
            // Collect all form data from VisualEditor components
            const contentData = {};
            
            // Get all VisualEditor inputs and textareas (must have both data-section and data-field)
            const editors = document.querySelectorAll('[data-section][data-field]');
            console.log('Found editors:', editors.length);
            
            editors.forEach(editor => {
              const sectionId = editor.getAttribute('data-section');
              const fieldPath = editor.getAttribute('data-field');
              
              // Get value based on element type
              let value;
              if (editor.tagName === 'INPUT') {
                value = editor.value;
                // Convert numeric fields to numbers
                if (editor.type === 'range' || editor.type === 'number' || fieldPath.includes('opacity')) {
                  value = parseFloat(value) || 0;
                }
              } else if (editor.tagName === 'TEXTAREA') {
                value = editor.value;
              } else if (editor.tagName === 'IMG') {
                value = editor.src;
              } else {
                // For div elements or other types, get text content
                value = editor.textContent || editor.innerHTML;
              }
              
              // Clean up the value - remove HTML tags if present and ensure it's serializable
              if (typeof value === 'string') {
                value = value.trim();
                // Remove any HTML tags for text fields
                if (editor.tagName !== 'IMG' && value.includes('<')) {
                  const tempDiv = document.createElement('div');
                  tempDiv.innerHTML = value;
                  value = tempDiv.textContent || tempDiv.innerText || '';
                }
              }
              
              console.log(`Editor ${sectionId}.${fieldPath}:`, {
                element: editor.tagName,
                value: value,
                originalValue: editor.value || editor.textContent || editor.innerHTML
              });
              
              // Special handling for features field - convert newline-separated text to array
              if (fieldPath.endsWith('.features') && typeof value === 'string') {
                value = value.split('\n').map(line => line.trim()).filter(line => line.length > 0);
                console.log(`Converted features to array:`, value);
              }
              
              // Build nested object structure
              if (sectionId && fieldPath && value !== undefined && value !== null) {
                if (!contentData[sectionId]) {
                  contentData[sectionId] = {};
                }
                
                // Handle nested field paths like 'backgroundImage.src' and array indices like 'properties.0.title'
                const pathParts = fieldPath.split('.');
                let current = contentData[sectionId];
                
                for (let i = 0; i < pathParts.length - 1; i++) {
                  const part = pathParts[i];
                  const isArrayIndex = /^\d+$/.test(part);
                  
                  if (isArrayIndex) {
                    // This is an array index
                    const index = parseInt(part);
                    if (!Array.isArray(current)) {
                      current = [];
                    }
                    if (!current[index]) {
                      current[index] = {};
                    }
                    current = current[index];
                  } else {
                    // This is an object property
                    if (!current[part]) {
                      // Check if the next part is a numeric index to determine if this should be an array
                      const nextPart = pathParts[i + 1];
                      const nextIsArrayIndex = nextPart && /^\d+$/.test(nextPart);
                      current[part] = nextIsArrayIndex ? [] : {};
                    }
                    current = current[part];
                  }
                }
                
                const lastPart = pathParts[pathParts.length - 1];
                const isLastArrayIndex = /^\d+$/.test(lastPart);
                
                if (isLastArrayIndex) {
                  const index = parseInt(lastPart);
                  if (!Array.isArray(current)) {
                    current = [];
                  }
                  current[index] = value;
                } else {
                  current[lastPart] = value;
                }
              }
            });
            
            console.log('Collected content data:', contentData);
            
            // Test JSON serialization before sending
            try {
              const testJson = JSON.stringify(contentData);
              console.log('JSON serialization test passed, size:', testJson.length);
            } catch (jsonError) {
              console.error('JSON serialization failed:', jsonError);
              throw new Error('Data contains non-serializable values: ' + jsonError.message);
            }
            
            // Make the save request with CSRF token and session ID
            const response = await fetch('/api/content/save', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken,
                'X-Session-ID': sessionId
              },
              body: JSON.stringify(contentData)
            });
            
            const result = await response.json();
            
            if (response.ok) {
              // Show success message
              const successMsg = document.createElement('div');
              successMsg.className = 'alert alert-success';
              successMsg.textContent = 'Content saved successfully!';
              successMsg.style.cssText = 'position: fixed; top: 20px; right: 20px; background: #10b981; color: white; padding: 1rem; border-radius: 0.5rem; z-index: 1000;';
              document.body.appendChild(successMsg);
              
              // Remove success message after 3 seconds
              setTimeout(() => {
                successMsg.remove();
              }, 3000);
            } else {
              throw new Error(result.error || 'Failed to save content');
            }
          } catch (error) {
            console.error('Save error:', error);
            
            // Show error message
            const errorMsg = document.createElement('div');
            errorMsg.className = 'alert alert-error';
            errorMsg.textContent = `Error saving content: ${error.message}`;
            errorMsg.style.cssText = 'position: fixed; top: 20px; right: 20px; background: #ef4444; color: white; padding: 1rem; border-radius: 0.5rem; z-index: 1000;';
            document.body.appendChild(errorMsg);
            
            // Remove error message after 5 seconds
            setTimeout(() => {
              errorMsg.remove();
            }, 5000);
        } finally {
          // Always reset button state
          saveBtn.textContent = 'Save Changes';
          saveBtn.disabled = false;
        }
      });
    }
  </script>
  
  <!-- Load SecurityManager for background image uploads -->
  <script type="module">
    import { SecurityManager } from '/client-security.js';
    window.securityManager = new SecurityManager();
  </script>
  
  <!-- Background image upload functionality is now handled by BackgroundImageUpload components -->
</AdminLayout>