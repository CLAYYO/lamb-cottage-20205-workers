---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { getUserFromRequest } from '../../lib/auth';

// Check authentication at page level
const user = await getUserFromRequest(Astro);
if (!user) {
  return Astro.redirect('/admin/login');
}
---

<AdminLayout title="Image Manager" user={user}>
  <div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Image Manager</h1>
        <p class="text-gray-600">Upload and manage images for your website</p>
      </div>
      <button 
        id="upload-btn" 
        class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
        </svg>
        Upload Image
      </button>
    </div>

    <!-- Upload Area -->
    <div 
      id="upload-area" 
      class="hidden border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-gray-400 transition-colors"
    >
      <div class="space-y-4">
        <div class="mx-auto w-12 h-12 text-gray-400">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
          </svg>
        </div>
        <div>
          <p class="text-lg font-medium text-gray-900">Drop images here or click to browse</p>
          <p class="text-sm text-gray-500">Supports: JPG, PNG, WebP, GIF (max 5MB)</p>
        </div>
        <input 
          type="file" 
          id="file-input" 
          accept="image/*" 
          multiple 
          class="hidden"
        >
        <div class="flex justify-center gap-4">
          <button 
            id="browse-btn" 
            class="bg-white border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors"
          >
            Browse Files
          </button>
          <button 
            id="cancel-upload-btn" 
            class="text-gray-500 hover:text-gray-700 px-4 py-2 transition-colors"
          >
            Cancel
          </button>
        </div>
      </div>
    </div>

    <!-- Upload Progress -->
    <div id="upload-progress" class="hidden">
      <div class="bg-white rounded-lg border p-4">
        <div class="flex items-center justify-between mb-2">
          <span class="text-sm font-medium text-gray-700">Uploading...</span>
          <span id="progress-text" class="text-sm text-gray-500">0%</span>
        </div>
        <div class="w-full bg-gray-200 rounded-full h-2">
          <div id="progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
        </div>
      </div>
    </div>

    <!-- Image Grid -->
    <div class="bg-white rounded-lg border">
      <div class="p-4 border-b">
        <div class="flex justify-between items-center">
          <h2 class="text-lg font-semibold text-gray-900">Uploaded Images</h2>
          <div class="flex items-center gap-4">
            <select id="sort-select" class="border border-gray-300 rounded-lg px-3 py-1 text-sm">
              <option value="newest">Newest First</option>
              <option value="oldest">Oldest First</option>
              <option value="name">Name A-Z</option>
              <option value="size">Size</option>
            </select>
            <button 
              id="refresh-btn" 
              class="text-gray-500 hover:text-gray-700 p-1 transition-colors"
              title="Refresh"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
      
      <div id="loading" class="p-8 text-center text-gray-500">
        <div class="animate-spin w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full mx-auto mb-2"></div>
        Loading images...
      </div>
      
      <div id="images-grid" class="hidden p-4">
        <div id="images-container" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4">
          <!-- Images will be loaded here -->
        </div>
        
        <div id="no-images" class="hidden text-center py-12 text-gray-500">
          <div class="mx-auto w-16 h-16 text-gray-300 mb-4">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
          </div>
          <p class="text-lg font-medium">No images uploaded yet</p>
          <p class="text-sm">Upload your first image to get started</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Image Preview Modal -->
  <div id="image-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
    <div class="bg-white rounded-lg max-w-4xl max-h-full overflow-auto">
      <div class="p-4 border-b flex justify-between items-center">
        <h3 id="modal-title" class="text-lg font-semibold">Image Preview</h3>
        <button id="close-modal" class="text-gray-500 hover:text-gray-700">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <div class="p-4">
        <img id="modal-image" src="" alt="" class="max-w-full h-auto rounded-lg mb-4">
        <div class="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p class="font-medium text-gray-700">Filename:</p>
            <p id="modal-filename" class="text-gray-600"></p>
          </div>
          <div>
            <p class="font-medium text-gray-700">Size:</p>
            <p id="modal-size" class="text-gray-600"></p>
          </div>
          <div>
            <p class="font-medium text-gray-700">URL:</p>
            <p id="modal-url" class="text-gray-600 break-all"></p>
          </div>
          <div>
            <p class="font-medium text-gray-700">Uploaded:</p>
            <p id="modal-date" class="text-gray-600"></p>
          </div>
        </div>
        <div class="flex justify-between items-center mt-6">
          <button 
            id="copy-url-btn" 
            class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
          >
            Copy URL
          </button>
          <button 
            id="delete-image-btn" 
            class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors"
          >
            Delete Image
          </button>
        </div>
      </div>
    </div>
  </div>

  <script is:inline>
    import { secureRequest, handleResponse, validateFile } from '../../lib/client-security.js';
    
    let currentImages = [];
    let currentImageData = null;

    // DOM elements
    const uploadBtn = document.getElementById('upload-btn');
    const uploadArea = document.getElementById('upload-area');
    const fileInput = document.getElementById('file-input');
    const browseBtn = document.getElementById('browse-btn');
    const cancelUploadBtn = document.getElementById('cancel-upload-btn');
    const uploadProgress = document.getElementById('upload-progress');
    const progressBar = document.getElementById('progress-bar');
    const progressText = document.getElementById('progress-text');
    const loading = document.getElementById('loading');
    const imagesGrid = document.getElementById('images-grid');
    const imagesContainer = document.getElementById('images-container');
    const noImages = document.getElementById('no-images');
    const sortSelect = document.getElementById('sort-select');
    const refreshBtn = document.getElementById('refresh-btn');
    const imageModal = document.getElementById('image-modal');
    const closeModal = document.getElementById('close-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalImage = document.getElementById('modal-image');
    const modalFilename = document.getElementById('modal-filename');
    const modalSize = document.getElementById('modal-size');
    const modalUrl = document.getElementById('modal-url');
    const modalDate = document.getElementById('modal-date');
    const copyUrlBtn = document.getElementById('copy-url-btn');
    const deleteImageBtn = document.getElementById('delete-image-btn');

    // Show upload area
    uploadBtn.addEventListener('click', () => {
      uploadArea.classList.remove('hidden');
      uploadBtn.classList.add('hidden');
    });

    // Hide upload area
    cancelUploadBtn.addEventListener('click', () => {
      uploadArea.classList.add('hidden');
      uploadBtn.classList.remove('hidden');
      fileInput.value = '';
    });

    // Browse files
    browseBtn.addEventListener('click', () => {
      fileInput.click();
    });

    // Drag and drop
    uploadArea.addEventListener('dragover', (e) => {
      e.preventDefault();
      uploadArea.classList.add('border-blue-400', 'bg-blue-50');
    });

    uploadArea.addEventListener('dragleave', (e) => {
      e.preventDefault();
      uploadArea.classList.remove('border-blue-400', 'bg-blue-50');
    });

    uploadArea.addEventListener('drop', (e) => {
      e.preventDefault();
      uploadArea.classList.remove('border-blue-400', 'bg-blue-50');
      const files = Array.from(e.dataTransfer.files).filter(file => file.type.startsWith('image/'));
      if (files.length > 0) {
        uploadFiles(files);
      }
    });

    // File input change
    fileInput.addEventListener('change', (e) => {
      const files = Array.from(e.target.files);
      if (files.length > 0) {
        uploadFiles(files);
      }
    });

    // Upload files
    async function uploadFiles(files) {
      const validFiles = [];
      
      // Validate all files first
      for (const file of files) {
        const validation = validateFile(file);
        if (!validation.valid) {
          alert(`${file.name}: ${validation.error}`);
        } else {
          validFiles.push(file);
        }
      }
      
      if (validFiles.length === 0) {
        return;
      }
      
      uploadArea.classList.add('hidden');
      uploadProgress.classList.remove('hidden');
      
      let completed = 0;
      const total = validFiles.length;
      
      for (const file of validFiles) {
        try {
          await uploadFile(file);
          completed++;
          const progress = Math.round((completed / total) * 100);
          progressBar.style.width = `${progress}%`;
          progressText.textContent = `${progress}%`;
        } catch (error) {
          console.error('Upload failed:', error);
          alert(`Failed to upload ${file.name}: ${error.message}`);
        }
      }
      
      uploadProgress.classList.add('hidden');
      uploadBtn.classList.remove('hidden');
      fileInput.value = '';
      
      // Refresh images
      await loadImages();
    }

    // Upload single file
    async function uploadFile(file) {
      const formData = new FormData();
      formData.append('file', file);
      
      // Get CSRF tokens for file upload
      const authToken = localStorage.getItem('auth_token');
      if (!authToken) {
        throw new Error('Authentication required');
      }
      
      const csrfResponse = await fetch('/api/auth/csrf', {
        headers: { 'Authorization': `Bearer ${authToken}` }
      });
      
      if (!csrfResponse.ok) {
        throw new Error('Failed to get security tokens');
      }
      
      const { csrfToken, sessionId } = await csrfResponse.json();

      const response = await fetch('/api/images/upload', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${authToken}`,
          'X-CSRF-Token': csrfToken,
          'X-Session-ID': sessionId
        },
        body: formData
      });
      
      return await handleResponse(response);
    }

    // Load images
    async function loadImages() {
      loading.classList.remove('hidden');
      imagesGrid.classList.add('hidden');
      
      try {
        const response = await secureRequest('/api/images/upload', {
          method: 'GET'
        });
        
        const data = await handleResponse(response);
        currentImages = data.images || [];
        renderImages();
      } catch (error) {
        console.error('Failed to load images:', error);
        alert(error.message || 'Failed to load images');
      } finally {
        loading.classList.add('hidden');
        imagesGrid.classList.remove('hidden');
      }
    }

    // Render images
    function renderImages() {
      const sortedImages = sortImages(currentImages);
      
      if (sortedImages.length === 0) {
        imagesContainer.innerHTML = '';
        noImages.classList.remove('hidden');
        return;
      }
      
      noImages.classList.add('hidden');
      
      imagesContainer.innerHTML = sortedImages.map(image => `
        <div class="group relative bg-gray-100 rounded-lg overflow-hidden aspect-square cursor-pointer hover:shadow-lg transition-shadow" data-image='${JSON.stringify(image)}'>
          <img 
            src="${image.url}" 
            alt="${image.filename}" 
            class="w-full h-full object-cover"
            loading="lazy"
          >
          <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-200 flex items-center justify-center">
            <div class="opacity-0 group-hover:opacity-100 transition-opacity duration-200">
              <button class="bg-white text-gray-800 px-3 py-1 rounded-lg text-sm font-medium hover:bg-gray-100 transition-colors">
                View
              </button>
            </div>
          </div>
          <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black to-transparent p-2">
            <p class="text-white text-xs truncate">${image.filename}</p>
            <p class="text-white text-xs opacity-75">${formatFileSize(image.size)}</p>
          </div>
        </div>
      `).join('');
      
      // Add click handlers
      imagesContainer.querySelectorAll('[data-image]').forEach(element => {
        element.addEventListener('click', () => {
          const imageData = JSON.parse(element.dataset.image);
          showImageModal(imageData);
        });
      });
    }

    // Sort images
    function sortImages(images) {
      const sortBy = sortSelect.value;
      
      return [...images].sort((a, b) => {
        switch (sortBy) {
          case 'newest':
            return new Date(b.created) - new Date(a.created);
          case 'oldest':
            return new Date(a.created) - new Date(b.created);
          case 'name':
            return a.filename.localeCompare(b.filename);
          case 'size':
            return b.size - a.size;
          default:
            return 0;
        }
      });
    }

    // Format file size
    function formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Show image modal
    function showImageModal(imageData) {
      currentImageData = imageData;
      modalTitle.textContent = imageData.filename;
      modalImage.src = imageData.url;
      modalImage.alt = imageData.filename;
      modalFilename.textContent = imageData.filename;
      modalSize.textContent = formatFileSize(imageData.size);
      modalUrl.textContent = imageData.url;
      modalDate.textContent = new Date(imageData.created).toLocaleString();
      imageModal.classList.remove('hidden');
    }

    // Close modal
    closeModal.addEventListener('click', () => {
      imageModal.classList.add('hidden');
      currentImageData = null;
    });

    // Close modal on outside click
    imageModal.addEventListener('click', (e) => {
      if (e.target === imageModal) {
        imageModal.classList.add('hidden');
        currentImageData = null;
      }
    });

    // Copy URL
    copyUrlBtn.addEventListener('click', async () => {
      if (currentImageData) {
        try {
          await navigator.clipboard.writeText(window.location.origin + currentImageData.url);
          copyUrlBtn.textContent = 'Copied!';
          setTimeout(() => {
            copyUrlBtn.textContent = 'Copy URL';
          }, 2000);
        } catch (error) {
          console.error('Failed to copy URL:', error);
          alert('Failed to copy URL');
        }
      }
    });

    // Delete image
    deleteImageBtn.addEventListener('click', async () => {
      if (currentImageData && confirm(`Are you sure you want to delete ${currentImageData.filename}?`)) {
        try {
          const response = await secureRequest('/api/images/upload', {
            method: 'DELETE',
            body: JSON.stringify({ filename: currentImageData.filename })
          });
          
          await handleResponse(response);
          
          imageModal.classList.add('hidden');
          currentImageData = null;
          await loadImages();
        } catch (error) {
          console.error('Failed to delete image:', error);
          alert(error.message || 'Failed to delete image');
        }
      }
    });

    // Sort change
    sortSelect.addEventListener('change', renderImages);

    // Refresh
    refreshBtn.addEventListener('click', loadImages);

    // Load images on page load
    loadImages();
  </script>
</AdminLayout>