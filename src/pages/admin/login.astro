---
import { getUserFromRequest } from '../../lib/auth';

// Check if user is already logged in with a valid token
const user = await getUserFromRequest(Astro);
if (user) {
  return Astro.redirect('/admin');
}
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Login - Lamb Cottage Caravan Park</title>
    <style>
      body {
        font-family: 'Inter', system-ui, sans-serif;
        margin: 0;
        padding: 0;
        background: linear-gradient(135deg, #006837 0%, #4CAF50 100%);
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      
      .login-container {
        background: white;
        padding: 2rem;
        border-radius: 1rem;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        width: 100%;
        max-width: 400px;
        margin: 1rem;
      }
      
      .logo {
        text-align: center;
        margin-bottom: 2rem;
      }
      
      .logo h1 {
        color: #006837;
        font-size: 1.5rem;
        font-weight: 700;
        margin: 0;
      }
      
      .logo p {
        color: #666;
        font-size: 0.875rem;
        margin: 0.5rem 0 0 0;
      }
      
      .form-group {
        margin-bottom: 1.5rem;
      }
      
      label {
        display: block;
        color: #374151;
        font-weight: 500;
        margin-bottom: 0.5rem;
      }
      
      input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #d1d5db;
        border-radius: 0.5rem;
        font-size: 1rem;
        transition: border-color 0.2s, box-shadow 0.2s;
        box-sizing: border-box;
      }
      
      input:focus {
        outline: none;
        border-color: #006837;
        box-shadow: 0 0 0 3px rgba(0, 104, 55, 0.1);
      }
      
      .login-btn {
        width: 100%;
        background: #006837;
        color: white;
        padding: 0.75rem;
        border: none;
        border-radius: 0.5rem;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.2s;
      }
      
      .login-btn:hover {
        background: #4CAF50;
      }
      
      .login-btn:disabled {
        background: #9ca3af;
        cursor: not-allowed;
      }
      
      .error-message {
        background: #fef2f2;
        color: #dc2626;
        padding: 0.75rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        font-size: 0.875rem;
        display: none;
      }
      
      .loading {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        border: 2px solid #ffffff;
        border-radius: 50%;
        border-top-color: transparent;
        animation: spin 1s ease-in-out infinite;
      }
      
      @keyframes spin {
        to { transform: rotate(360deg); }
      }
    </style>
  </head>
  <body>
    <div class="login-container">
      <div class="logo">
        <h1>üèïÔ∏è Lamb Cottage</h1>
        <p>Content Management System</p>
      </div>
      
      <div id="error-message" class="error-message"></div>
      
      <form id="login-form">
        <div class="form-group">
          <label for="username">Username</label>
          <input type="text" id="username" name="username" required autocomplete="username" />
        </div>
        
        <div class="form-group">
          <label for="password">Password</label>
          <input type="password" id="password" name="password" required autocomplete="current-password" />
        </div>
        
        <button type="submit" class="login-btn" id="login-btn">
          <span id="btn-text">Sign In</span>
          <span id="btn-loading" class="loading" style="display: none;"></span>
        </button>
      </form>
    </div>

    <script is:inline>
      const form = document.getElementById('login-form');
      const errorMessage = document.getElementById('error-message');
      const loginBtn = document.getElementById('login-btn');
      const btnText = document.getElementById('btn-text');
      const btnLoading = document.getElementById('btn-loading');

      function sanitizeInput(input) {
        return input
          .replace(/[<>"'&]/g, function(char) {
            const entities = {
              '<': '&lt;',
              '>': '&gt;',
              '"': '&quot;',
              "'": '&#x27;',
              '&': '&amp;'
            };
            return entities[char] || char;
          })
          .trim();
      }

      function showError(message) {
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
      }

      function hideError() {
        errorMessage.style.display = 'none';
      }

      function setLoading(loading) {
        loginBtn.disabled = loading;
        if (loading) {
          btnText.style.display = 'none';
          btnLoading.style.display = 'inline-block';
        } else {
          btnText.style.display = 'inline';
          btnLoading.style.display = 'none';
        }
      }

      form.addEventListener('submit', async function(e) {
        console.log('üîê FRONTEND: Form submission started');
        e.preventDefault();
        hideError();
        setLoading(true);

        const formData = new FormData(form);
        const username = sanitizeInput(formData.get('username'));
        const password = formData.get('password'); // Don't sanitize passwords
        console.log('üîê FRONTEND: Form data collected:', { username, passwordLength: password?.length });

        try {
          console.log('üîê FRONTEND: Making API request to /api/auth/login');
          // Use regular fetch for login (no auth token needed)
          const response = await fetch('/api/auth/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username: username, password: password }),
            credentials: 'include'
          });

          console.log('üîê FRONTEND: API response received:', {
            status: response.status,
            statusText: response.statusText,
            ok: response.ok,
            headers: Object.fromEntries(response.headers.entries())
          });

          if (!response.ok) {
            const errorData = await response.json().catch(function() { return { error: 'Login failed' }; });
            throw new Error(errorData.error || 'Login failed: ' + response.status);
          }

          const data = await response.json();
          console.log('üîê FRONTEND: Response data parsed:', data);
          
          if (data.success) {
            console.log('üîê FRONTEND: Login successful, storing user data');
            // The token is set as an HTTP-only cookie by the server
            // Store user info in localStorage for client-side use
            localStorage.setItem('user_role', data.user.role);
            localStorage.setItem('username', data.user.username);
            localStorage.setItem('user', JSON.stringify(data.user));
            console.log('üîê FRONTEND: User data stored in localStorage');
            
            // Redirect to admin dashboard
            console.log('üîê FRONTEND: Redirecting to /admin');
            window.location.href = '/admin';
          } else {
            console.log('üîê FRONTEND: Login failed - server returned success: false');
            throw new Error(data.message || 'Login failed');
          }
        } catch (error) {
          console.error('üîê FRONTEND: Login error occurred:', error);
          console.error('üîê FRONTEND: Error details:', {
            name: error.name,
            message: error.message,
            stack: error.stack
          });
          showError(error.message || 'Login failed');
          console.log('üîê FRONTEND: Error displayed to user');
        } finally {
          setLoading(false);
          console.log('üîê FRONTEND: UI reset to normal state');
        }
      });
    </script>
  </body>
</html>