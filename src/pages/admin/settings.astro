---
export const prerender = false;

import AdminLayout from '../../layouts/AdminLayout.astro';
---

<AdminLayout title="Settings">
  <div class="settings-container">
    <!-- Site Settings -->
    <div class="settings-section">
      <h2>Site Settings</h2>
      <div class="settings-grid">
        <div class="setting-item">
          <label for="site-title">Site Title</label>
          <input type="text" id="site-title" value="Lamb Cottage" class="setting-input">
        </div>
        
        <div class="setting-item">
          <label for="site-description">Site Description</label>
          <textarea id="site-description" class="setting-textarea" rows="3">Holiday cottage in the heart of the Lake District</textarea>
        </div>
        
        <div class="setting-item">
          <label for="contact-email">Contact Email</label>
          <input type="email" id="contact-email" value="info@lambcottage.co.uk" class="setting-input">
        </div>
        
        <div class="setting-item">
          <label for="contact-phone">Contact Phone</label>
          <input type="tel" id="contact-phone" value="+44 1234 567890" class="setting-input">
        </div>
      </div>
    </div>
    
    <!-- SEO Settings -->
    <div class="settings-section">
      <h2>SEO Settings</h2>
      <div class="settings-grid">
        <div class="setting-item">
          <label for="meta-keywords">Meta Keywords</label>
          <input type="text" id="meta-keywords" value="lake district, holiday cottage, vacation rental" class="setting-input">
        </div>
        
        <div class="setting-item">
          <label for="google-analytics">Google Analytics ID</label>
          <input type="text" id="google-analytics" placeholder="GA-XXXXXXXXX" class="setting-input">
        </div>
      </div>
    </div>
    
    <!-- Integration Settings -->
    <div class="settings-section">
      <h2>Integration Settings</h2>
      <div class="settings-grid">
        <div class="setting-item">
          <label for="tripadvisor-id">TripAdvisor Property ID</label>
          <input type="text" id="tripadvisor-id" placeholder="Enter TripAdvisor ID" class="setting-input">
        </div>
        
        <div class="setting-item">
          <label for="booking-url">Booking System URL</label>
          <input type="url" id="booking-url" placeholder="https://booking.example.com" class="setting-input">
        </div>
      </div>
    </div>
    
    <!-- Security Settings -->
    <div class="settings-section">
      <h2>Security Settings</h2>
      <div class="settings-grid">
        <div class="setting-item">
          <label for="session-timeout">Session Timeout (minutes)</label>
          <input type="number" id="session-timeout" value="60" min="15" max="480" class="setting-input">
        </div>
        
        <div class="setting-item">
          <label class="checkbox-label">
            <input type="checkbox" id="force-https" checked>
            <span class="checkmark"></span>
            Force HTTPS
          </label>
        </div>
        
        <div class="setting-item">
          <label class="checkbox-label">
            <input type="checkbox" id="enable-rate-limiting" checked>
            <span class="checkmark"></span>
            Enable Rate Limiting
          </label>
        </div>
      </div>
    </div>
    
    <!-- Backup Settings -->
    <div class="settings-section">
      <h2>Backup & Maintenance</h2>
      <div class="settings-grid">
        <div class="setting-item">
          <label for="backup-frequency">Backup Frequency</label>
          <select id="backup-frequency" class="setting-select">
            <option value="daily">Daily</option>
            <option value="weekly" selected>Weekly</option>
            <option value="monthly">Monthly</option>
          </select>
        </div>
        
        <div class="setting-item">
          <button type="button" class="backup-btn">Create Backup Now</button>
        </div>
        
        <div class="setting-item">
          <button type="button" class="maintenance-btn">Clear Cache</button>
        </div>
      </div>
    </div>
    
    <!-- Save Button -->
    <div class="settings-actions">
      <button type="button" class="save-btn" id="save-settings">Save Settings</button>
      <button type="button" class="reset-btn" id="reset-settings">Reset to Defaults</button>
    </div>
  </div>

  <style>
    .settings-container {
      max-width: 800px;
      margin: 0 auto;
    }
    
    .settings-section {
      background: #f8fafc;
      border-radius: 0.75rem;
      padding: 1.5rem;
      margin-bottom: 2rem;
      border: 1px solid #e2e8f0;
    }
    
    .settings-section h2 {
      color: #1f2937;
      font-size: 1.25rem;
      font-weight: 600;
      margin-bottom: 1.5rem;
      padding-bottom: 0.5rem;
      border-bottom: 2px solid #4CAF50;
    }
    
    .settings-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
    }
    
    .setting-item {
      display: flex;
      flex-direction: column;
    }
    
    .setting-item label {
      font-weight: 500;
      color: #374151;
      margin-bottom: 0.5rem;
      font-size: 0.875rem;
    }
    
    .setting-input,
    .setting-textarea,
    .setting-select {
      padding: 0.75rem;
      border: 1px solid #d1d5db;
      border-radius: 0.5rem;
      font-size: 0.875rem;
      transition: border-color 0.2s, box-shadow 0.2s;
    }
    
    .setting-input:focus,
    .setting-textarea:focus,
    .setting-select:focus {
      outline: none;
      border-color: #4CAF50;
      box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);
    }
    
    .checkbox-label {
      display: flex;
      align-items: center;
      cursor: pointer;
      font-weight: 500;
      color: #374151;
    }
    
    .checkbox-label input[type="checkbox"] {
      margin-right: 0.75rem;
      transform: scale(1.2);
    }
    
    .backup-btn,
    .maintenance-btn {
      background: #6b7280;
      color: white;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 0.5rem;
      cursor: pointer;
      font-size: 0.875rem;
      font-weight: 500;
      transition: background-color 0.2s;
    }
    
    .backup-btn:hover,
    .maintenance-btn:hover {
      background: #4b5563;
    }
    
    .settings-actions {
      display: flex;
      gap: 1rem;
      justify-content: center;
      padding-top: 2rem;
      border-top: 1px solid #e2e8f0;
    }
    
    .save-btn {
      background: #4CAF50;
      color: white;
      border: none;
      padding: 0.875rem 2rem;
      border-radius: 0.5rem;
      cursor: pointer;
      font-size: 1rem;
      font-weight: 600;
      transition: background-color 0.2s;
    }
    
    .save-btn:hover {
      background: #45a049;
    }
    
    .reset-btn {
      background: #dc2626;
      color: white;
      border: none;
      padding: 0.875rem 2rem;
      border-radius: 0.5rem;
      cursor: pointer;
      font-size: 1rem;
      font-weight: 600;
      transition: background-color 0.2s;
    }
    
    .reset-btn:hover {
      background: #b91c1c;
    }
    
    @media (max-width: 768px) {
      .settings-grid {
        grid-template-columns: 1fr;
      }
      
      .settings-actions {
        flex-direction: column;
      }
    }
  </style>

  <script>
    // Save settings functionality
    const saveSettingsBtn = document.getElementById('save-settings');
    if (saveSettingsBtn) {
      saveSettingsBtn.addEventListener('click', async () => {
        const siteTitleEl = document.getElementById('site-title') as HTMLInputElement | null;
        const siteDescriptionEl = document.getElementById('site-description') as HTMLTextAreaElement | null;
        const contactEmailEl = document.getElementById('contact-email') as HTMLInputElement | null;
        const contactPhoneEl = document.getElementById('contact-phone') as HTMLInputElement | null;
        const metaKeywordsEl = document.getElementById('meta-keywords') as HTMLInputElement | null;
        const googleAnalyticsEl = document.getElementById('google-analytics') as HTMLInputElement | null;
        const tripadvisorIdEl = document.getElementById('tripadvisor-id') as HTMLInputElement | null;
        const bookingUrlEl = document.getElementById('booking-url') as HTMLInputElement | null;
        const sessionTimeoutEl = document.getElementById('session-timeout') as HTMLInputElement | null;
        const forceHttpsEl = document.getElementById('force-https') as HTMLInputElement | null;
        const enableRateLimitEl = document.getElementById('enable-rate-limiting') as HTMLInputElement | null;
        const backupFrequencyEl = document.getElementById('backup-frequency') as HTMLSelectElement | null;
        
        const settings = {
          siteTitle: siteTitleEl?.value || '',
          siteDescription: siteDescriptionEl?.value || '',
          contactEmail: contactEmailEl?.value || '',
          contactPhone: contactPhoneEl?.value || '',
          metaKeywords: metaKeywordsEl?.value || '',
          googleAnalytics: googleAnalyticsEl?.value || '',
          tripadvisorId: tripadvisorIdEl?.value || '',
          bookingUrl: bookingUrlEl?.value || '',
          sessionTimeout: sessionTimeoutEl?.value || '60',
          forceHttps: forceHttpsEl?.checked || false,
          enableRateLimit: enableRateLimitEl?.checked || false,
          backupFrequency: backupFrequencyEl?.value || 'weekly'
        };
      
      try {
        const response = await fetch('/api/admin/settings', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(settings)
        });
        
        if (response.ok) {
          alert('Settings saved successfully!');
        } else {
          alert('Failed to save settings. Please try again.');
        }
      } catch (error) {
        console.error('Settings save error:', error);
        alert('An error occurred while saving settings.');
      }
      });
    }
    
    // Reset settings functionality
    const resetSettingsBtn = document.getElementById('reset-settings');
    if (resetSettingsBtn) {
      resetSettingsBtn.addEventListener('click', () => {
        if (confirm('Are you sure you want to reset all settings to defaults? This action cannot be undone.')) {
          location.reload();
        }
      });
    }
    
    // Backup functionality
    const backupBtn = document.querySelector('.backup-btn');
    if (backupBtn) {
      backupBtn.addEventListener('click', async () => {
      try {
        const response = await fetch('/api/admin/backup', {
          method: 'POST'
        });
        
        if (response.ok) {
          alert('Backup created successfully!');
        } else {
          alert('Failed to create backup. Please try again.');
        }
      } catch (error) {
        console.error('Backup error:', error);
        alert('An error occurred while creating backup.');
      }
      });
    }
    
    // Clear cache functionality
    const maintenanceBtn = document.querySelector('.maintenance-btn');
    if (maintenanceBtn) {
      maintenanceBtn.addEventListener('click', async () => {
      try {
        const response = await fetch('/api/admin/cache/clear', {
          method: 'POST'
        });
        
        if (response.ok) {
          alert('Cache cleared successfully!');
        } else {
          alert('Failed to clear cache. Please try again.');
        }
      } catch (error) {
        console.error('Cache clear error:', error);
        alert('An error occurred while clearing cache.');
      }
      });
    }
  </script>
</AdminLayout>