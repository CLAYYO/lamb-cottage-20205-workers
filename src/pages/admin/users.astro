---
// Check authentication
const authToken = Astro.cookies.get('auth_token')?.value;
if (!authToken) {
  return Astro.redirect('/admin/login');
}
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Management - Lamb Cottage Admin</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-gray-50">
  <!-- Navigation -->
  <nav class="bg-white shadow-sm border-b">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between h-16">
        <div class="flex items-center">
          <h1 class="text-xl font-semibold text-gray-900">User Management</h1>
        </div>
        <div class="flex items-center space-x-4">
          <a href="/admin" class="text-gray-600 hover:text-gray-900">
            <i class="fas fa-arrow-left mr-2"></i>Back to Dashboard
          </a>
          <button id="logout-btn" class="text-red-600 hover:text-red-800">
            <i class="fas fa-sign-out-alt mr-2"></i>Logout
          </button>
        </div>
      </div>
    </div>
  </nav>

  <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="px-4 py-6 sm:px-0">
      <div class="flex justify-between items-center mb-6">
        <div>
          <h2 class="text-2xl font-bold text-gray-900">Users</h2>
          <p class="text-gray-600">Manage user accounts and permissions</p>
        </div>
        <button id="add-user-btn" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center">
          <i class="fas fa-plus mr-2"></i>Add User
        </button>
      </div>

      <!-- Users Table -->
      <div class="bg-white shadow rounded-lg overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-medium text-gray-900">All Users</h3>
        </div>
        
        <!-- Loading State -->
        <div id="loading" class="p-8 text-center">
          <i class="fas fa-spinner fa-spin text-2xl text-gray-400"></i>
          <p class="text-gray-500 mt-2">Loading users...</p>
        </div>

        <!-- Users Table Content -->
        <div id="users-table" class="hidden">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Login</th>
                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody id="users-tbody" class="bg-white divide-y divide-gray-200">
              <!-- Users will be populated here -->
            </tbody>
          </table>
        </div>

        <!-- Empty State -->
        <div id="empty-state" class="hidden p-8 text-center">
          <i class="fas fa-users text-4xl text-gray-300 mb-4"></i>
          <h3 class="text-lg font-medium text-gray-900 mb-2">No users found</h3>
          <p class="text-gray-500">Get started by adding your first user.</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Add/Edit User Modal -->
  <div id="user-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 id="modal-title" class="text-lg font-medium text-gray-900">Add User</h3>
        </div>
        
        <form id="user-form" class="p-6">
          <input type="hidden" id="user-id" name="id">
          
          <div class="mb-4">
            <label for="username" class="block text-sm font-medium text-gray-700 mb-2">Username</label>
            <input type="text" id="username" name="username" required 
                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
          </div>
          
          <div class="mb-4">
            <label for="email" class="block text-sm font-medium text-gray-700 mb-2">Email</label>
            <input type="email" id="email" name="email" required 
                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
          </div>
          
          <div class="mb-4">
            <label for="role" class="block text-sm font-medium text-gray-700 mb-2">Role</label>
            <select id="role" name="role" required 
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option value="editor">Editor</option>
              <option value="admin">Admin</option>
            </select>
          </div>
          
          <div id="password-section" class="mb-4">
            <label for="password" class="block text-sm font-medium text-gray-700 mb-2">Password</label>
            <input type="password" id="password" name="password" 
                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            <p id="password-help" class="text-sm text-gray-500 mt-1">Minimum 6 characters</p>
          </div>
          
          <div class="mb-6">
            <label class="flex items-center">
              <input type="checkbox" id="active" name="active" checked 
                     class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
              <span class="ml-2 text-sm text-gray-700">Active</span>
            </label>
          </div>
          
          <div class="flex justify-end space-x-3">
            <button type="button" id="cancel-btn" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300">
              Cancel
            </button>
            <button type="submit" id="save-btn" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
              Save User
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Password Reset Modal -->
  <div id="password-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-medium text-gray-900">Reset Password</h3>
        </div>
        
        <form id="password-form" class="p-6">
          <div class="mb-4">
            <label for="new-password" class="block text-sm font-medium text-gray-700 mb-2">New Password</label>
            <input type="password" id="new-password" name="newPassword" required minlength="6"
                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            <p class="text-sm text-gray-500 mt-1">Minimum 6 characters</p>
          </div>
          
          <div class="mb-6">
            <label for="confirm-password" class="block text-sm font-medium text-gray-700 mb-2">Confirm Password</label>
            <input type="password" id="confirm-password" name="confirmPassword" required minlength="6"
                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
          </div>
          
          <div class="flex justify-end space-x-3">
            <button type="button" id="password-cancel-btn" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300">
              Cancel
            </button>
            <button type="submit" id="password-save-btn" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
              Reset Password
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="delete-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div class="px-6 py-4">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Delete User</h3>
          <p class="text-gray-600 mb-6">Are you sure you want to delete this user? This action cannot be undone.</p>
          
          <div class="flex justify-end space-x-3">
            <button id="delete-cancel-btn" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300">
              Cancel
            </button>
            <button id="delete-confirm-btn" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700">
              Delete
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script type="module" is:inline>
    import { secureRequest, handleResponse, sanitizeInput } from '../../lib/client-security.js';
    
    let users = [];
    let editingUser = null;
    let deletingUserId = null;
    let resettingUserId = null;

    // DOM elements
    const loading = document.getElementById('loading');
    const usersTable = document.getElementById('users-table');
    const emptyState = document.getElementById('empty-state');
    const usersTbody = document.getElementById('users-tbody');
    const userModal = document.getElementById('user-modal');
    const passwordModal = document.getElementById('password-modal');
    const deleteModal = document.getElementById('delete-modal');
    const userForm = document.getElementById('user-form');
    const passwordForm = document.getElementById('password-form');
    const modalTitle = document.getElementById('modal-title');
    const passwordSection = document.getElementById('password-section');
    const passwordHelp = document.getElementById('password-help');

    // Load users on page load
    document.addEventListener('DOMContentLoaded', function() {
      loadUsers();
      setupEventListeners();
    });

    function setupEventListeners() {
      // Add user button
      document.getElementById('add-user-btn').addEventListener('click', () => {
        openUserModal();
      });

      // Modal close buttons
      document.getElementById('cancel-btn').addEventListener('click', closeUserModal);
      document.getElementById('password-cancel-btn').addEventListener('click', closePasswordModal);
      document.getElementById('delete-cancel-btn').addEventListener('click', closeDeleteModal);
      
      // Form submission
      userForm.addEventListener('submit', handleUserSubmit);
      passwordForm.addEventListener('submit', handlePasswordReset);
      
      // Delete confirmation
      document.getElementById('delete-confirm-btn').addEventListener('click', confirmDelete);
      
      // Logout
      document.getElementById('logout-btn').addEventListener('click', logout);
      
      // Close modals on backdrop click
      userModal.addEventListener('click', (e) => {
        if (e.target === userModal) closeUserModal();
      });
      
      passwordModal.addEventListener('click', (e) => {
        if (e.target === passwordModal) closePasswordModal();
      });
      
      deleteModal.addEventListener('click', (e) => {
        if (e.target === deleteModal) closeDeleteModal();
      });
    }

    async function loadUsers() {
      try {
        loading.classList.remove('hidden');
        usersTable.classList.add('hidden');
        emptyState.classList.add('hidden');

        const response = await secureRequest('/api/users/manage', {
          method: 'GET'
        });

        const data = await handleResponse(response);
        users = data.users || [];
        
        renderUsers();
      } catch (error) {
        console.error('Failed to load users:', error);
        showNotification(error.message || 'Failed to load users', 'error');
      } finally {
        loading.classList.add('hidden');
      }
    }

    function renderUsers() {
      if (users.length === 0) {
        emptyState.classList.remove('hidden');
        return;
      }

      usersTable.classList.remove('hidden');
      usersTbody.innerHTML = users.map(user => `
        <tr>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex items-center">
              <div class="flex-shrink-0 h-10 w-10">
                <div class="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">
                  <i class="fas fa-user text-gray-600"></i>
                </div>
              </div>
              <div class="ml-4">
                <div class="text-sm font-medium text-gray-900">${user.username}</div>
                <div class="text-sm text-gray-500">${user.email}</div>
              </div>
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
              user.role === 'admin' ? 'bg-purple-100 text-purple-800' : 'bg-blue-100 text-blue-800'
            }">
              ${user.role}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
              user.active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
            }">
              ${user.active ? 'Active' : 'Inactive'}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${new Date(user.createdAt).toLocaleDateString()}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${user.lastLogin ? new Date(user.lastLogin).toLocaleDateString() : 'Never'}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
            <button onclick="editUser('${user.id}')" class="text-blue-600 hover:text-blue-900 mr-3" title="Edit User">
              <i class="fas fa-edit"></i>
            </button>
            <button onclick="resetPassword('${user.id}')" class="text-yellow-600 hover:text-yellow-900 mr-3" title="Reset Password">
              <i class="fas fa-key"></i>
            </button>
            <button onclick="deleteUser('${user.id}')" class="text-red-600 hover:text-red-900" title="Delete User">
              <i class="fas fa-trash"></i>
            </button>
          </td>
        </tr>
      `).join('');
    }

    function openUserModal(user = null) {
      editingUser = user;
      modalTitle.textContent = user ? 'Edit User' : 'Add User';
      
      if (user) {
        document.getElementById('user-id').value = user.id;
        document.getElementById('username').value = user.username;
        document.getElementById('email').value = user.email;
        document.getElementById('role').value = user.role;
        document.getElementById('active').checked = user.active;
        
        // Hide password field for editing
        passwordSection.classList.add('hidden');
        document.getElementById('password').required = false;
      } else {
        userForm.reset();
        document.getElementById('user-id').value = '';
        passwordSection.classList.remove('hidden');
        document.getElementById('password').required = true;
        passwordHelp.textContent = 'Minimum 6 characters';
      }
      
      userModal.classList.remove('hidden');
    }

    function closeUserModal() {
      userModal.classList.add('hidden');
      editingUser = null;
    }

    function closeDeleteModal() {
      deleteModal.classList.add('hidden');
      deletingUserId = null;
    }

    async function handleUserSubmit(e) {
      e.preventDefault();
      
      const formData = new FormData(userForm);
      const userData = {
        username: sanitizeInput(formData.get('username'), 'text'),
        email: sanitizeInput(formData.get('email'), 'text'),
        role: formData.get('role'),
        active: formData.get('active') === 'on'
      };
      
      const password = formData.get('password');
      if (password) {
        if (password.length < 6) {
          showNotification('Password must be at least 6 characters', 'error');
          return;
        }
        userData.password = password;
      }

      try {
        const saveBtn = document.getElementById('save-btn');
        saveBtn.disabled = true;
        saveBtn.textContent = 'Saving...';

        let response;
        if (editingUser) {
          response = await secureRequest(`/api/users/manage?id=${editingUser.id}`, {
            method: 'PUT',
            body: JSON.stringify(userData)
          });
        } else {
          response = await secureRequest('/api/users/manage', {
            method: 'POST',
            body: JSON.stringify(userData)
          });
        }

        await handleResponse(response);
        
        showNotification(
          editingUser ? 'User updated successfully' : 'User created successfully',
          'success'
        );
        
        closeUserModal();
        loadUsers();
      } catch (error) {
        console.error('Save user error:', error);
        showNotification(error.message || 'Failed to save user', 'error');
      } finally {
        const saveBtn = document.getElementById('save-btn');
        saveBtn.disabled = false;
        saveBtn.textContent = 'Save User';
      }
    }

    async function confirmDelete() {
      if (!deletingUserId) return;

      try {
        const response = await secureRequest(`/api/users/manage?id=${deletingUserId}`, {
          method: 'DELETE'
        });

        await handleResponse(response);
        
        showNotification('User deleted successfully', 'success');
        closeDeleteModal();
        loadUsers();
      } catch (error) {
        console.error('Delete user error:', error);
        showNotification(error.message || 'Failed to delete user', 'error');
      }
    }

    function showNotification(message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
        type === 'success' ? 'bg-green-500 text-white' :
        type === 'error' ? 'bg-red-500 text-white' :
        'bg-blue-500 text-white'
      }`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      // Remove after 3 seconds
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }

    function logout() {
      localStorage.removeItem('auth_token');
      localStorage.removeItem('user_role');
      window.location.href = '/admin/login';
    }

    // Global functions for inline event handlers
    window.editUser = function(userId) {
      const user = users.find(u => u.id === userId);
      if (user) {
        openUserModal(user);
      }
    };

    window.deleteUser = function(userId) {
      deletingUserId = userId;
      deleteModal.classList.remove('hidden');
    };
  </script>
</body>
</html>